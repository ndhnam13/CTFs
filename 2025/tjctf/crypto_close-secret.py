import hashlib
from Crypto.Util import number

def analyze_dh_parameters():
    """Analyze the Diffie-Hellman parameters for vulnerabilities"""
    p = 170414318260705733587875759581770955570309017044222937085191604024452735032594248474424765923836540211737893584439554899006773968654769091193247412851040473946419617178998073469868100539248246324253541060008089222137232131934348865470429102329705344623611275490470993627132873486693712828328643742288205112527
    g = 120681139203436291164378184116247954042577742288954642499192807256993763587666398677530059224138614478338902785098981693557339976850974900098504529593380063851724924557945231653341683157340782295208957489088101760434538987711049950242033559644930710185044163047334693996198198372552023208414727714764489712283
    u = 135668771029510263907110237169555858182389140035220525526216692019541532644619777145586283806534328053310689073913522508004464538889367992552446578372649985255898549272854575377510712592134690407014502401681964878932616905735136520060908211096236619268316849967775899568661131681489146190493710890951160724706
    v = 165036785985552337550703112630578321968495250714033243796585786662838937148680751454783550779786426910035205483848329274328823513229605340921993107676999077541506833174273521350152646080628330616219078232643906110969196674275384683101159565935895506360072481873027262155137472248477311708158177572618168100749
    
    print("=== Diffie-Hellman Parameter Analysis ===")
    print(f"p = {p}")
    print(f"g = {g}")
    print(f"u = g^a mod p = {u}")
    print(f"v = g^b mod p = {v}")
    
    # The vulnerability: in generate_dh_key(), we have:
    # a = randint(p - 10, p) which means a is in range [p-10, p]
    # b = randint(g - 10, g) which means b is in range [g-10, g]
    
    print("\n=== Vulnerability Analysis ===")
    print("The private keys are chosen from very small ranges:")
    print(f"a ‚àà [p-10, p] = [{p-10}, {p}]")
    print(f"b ‚àà [g-10, g] = [{g-10}, {g}]")
    print("This means we can brute force both private keys!")
    
    return p, g, u, v

def brute_force_private_keys(p, g, u, v):
    """Brute force the private keys given the small search space"""
    print("\n=== Brute Forcing Private Keys ===")
    
    # Find 'a' such that g^a ‚â° u (mod p)
    # Since a ‚àà [p-10, p], we only need to check 11 values
    a_found = None
    for a in range(p-10, p+1):
        if pow(g, a, p) == u:
            a_found = a
            print(f"Found a = {a}")
            break
    
    if a_found is None:
        print("Could not find private key 'a'")
        return None, None
    
    # Find 'b' such that g^b ‚â° v (mod p)
    # Since b ‚àà [g-10, g], we only need to check 11 values
    b_found = None
    for b in range(g-10, g+1):
        if pow(g, b, p) == v:
            b_found = b
            print(f"Found b = {b}")
            break
    
    if b_found is None:
        print("Could not find private key 'b'")
        return a_found, None
    
    return a_found, b_found

def compute_shared_key(p, g, u, v, a, b):
    """Compute the shared secret key"""
    print("\n=== Computing Shared Key ===")
    
    # Compute shared key as Alice: v^a mod p
    shared_key_alice = pow(v, a, p)
    print(f"Shared key (Alice's computation): {shared_key_alice}")
    
    # Compute shared key as Bob: u^b mod p  
    shared_key_bob = pow(u, b, p)
    print(f"Shared key (Bob's computation): {shared_key_bob}")
    
    if shared_key_alice == shared_key_bob:
        print("‚úì Shared keys match!")
        return shared_key_alice
    else:
        print("‚úó Shared keys don't match!")
        return None

def decrypt_flag(shared_key, encrypted_data):
    """Decrypt the flag using the recovered shared key"""
    print("\n=== Decrypting Flag ===")
    
    # Step 1: Generate XOR key from shared key (same as in encrypt.py)
    xor_key_str = hashlib.sha256(str(shared_key).encode()).hexdigest()
    xor_key_bytes = xor_key_str.encode('utf-8')
    print(f"XOR key string: {xor_key_str}")
    
    # Step 2: Reverse the outer encryption
    # The outer encryption does: (val + key_offset) * key where key_offset = key % 256
    key_offset = shared_key % 256
    print(f"Key offset: {key_offset}")
    
    intermediate_ords = []
    for cipher_val in encrypted_data:
        # Reverse: cipher_val = (val + key_offset) * shared_key
        # So: val = (cipher_val / shared_key) - key_offset
        if cipher_val % shared_key != 0:
            print(f"Warning: cipher value {cipher_val} not divisible by shared key")
        val = (cipher_val // shared_key) - key_offset
        intermediate_ords.append(val)
    
    print(f"Intermediate ords after outer decryption: {intermediate_ords[:10]}...")
    
    # Step 3: Reverse the XOR encryption
    # The XOR encryption processes bytes in reverse order
    decrypted_bytes = []
    key_length = len(xor_key_bytes)
    
    for i, encrypted_ord in enumerate(intermediate_ords):
        key_byte = xor_key_bytes[i % key_length]
        decrypted_byte = encrypted_ord ^ key_byte
        decrypted_bytes.append(decrypted_byte)
    
    # Since the original encryption reversed the byte order, we need to reverse it back
    decrypted_bytes.reverse()
    
    # Convert back to string
    try:
        flag = bytes(decrypted_bytes).decode('utf-8')
        print(f"Decrypted flag: {flag}")
        return flag
    except UnicodeDecodeError as e:
        print(f"Failed to decode as UTF-8: {e}")
        print(f"Raw bytes: {decrypted_bytes}")
        return None

def main():
    print("üîç Analyzing Custom Diffie-Hellman Cryptography Challenge")
    print("=" * 60)
    
    # Load encrypted data
    encrypted_data = [6571944434919857297452897673441942143484940964191440089367167914625678155633678558745802800218365745400258663773110293972483876259742540934734499957752168137035580779732891466086674425563936564709723870630875100937187290451997023657014217420325100882986565550554925402781059527116712127332284606779997903028480, 6286207720358124371476684731118379441594291357052681824612073657468039974953953404017724417600175930382856113174279411625854142509318952198441695611762943435425338137135809228430732059235069757548431528429532705244266103910605848715404903619441400844595845309226450385268839547676855078317837449963476255070720, 190491143041155283984141961549041801260433071425838843170062838105092120453150103152052255078793210011601700399220588231086489166949059157528536230659483134406828428398054825103961577552577871440861561467561597128614124360927449961072875867255800025593813494218983345008146652959904699342964771211014431971840, 6095716577316969087492542769569337640333858285626842981442010819362947854500803300865672162521382720371254412775058823394767653342369893040913159381103460301018509708737754403326770481682491886107569966961971108115651979549678398754332027752185600819002031815007467040260692894716950378974872678752461823098880, 0, 7714891293166789001357749442736192951047539392746473148387544943256230878352579177658116330691125005469868866168433823359002811261436895879905717341709066943476551350121220416710443890879403793354893239436244683708872036617561723423451472623859901036549446515868825472829939444876140323390073234046084494859520, 6286207720358124371476684731118379441594291357052681824612073657468039974953953404017724417600175930382856113174279411625854142509318952198441695611762943435425338137135809228430732059235069757548431528429532705244266103910605848715404903619441400844595845309226450385268839547676855078317837449963476255070720, 10381767295742962977135736904422778168693602392708216952768424676727520564696680621786847901794229945632292671757522058594213659598723724085305224570941830825172149347693987968165905976615493993526955099982107043509469777670546022878471734765441101394862835434934592302943992586314806114191580031000286542465280, 1714420287370397555857277653941376211343897642832549588530565542945829084078350928368470295709138890104415303592985294079778402502541532417756826075935348209661455855582493425935654197973200842967754053208054374157527119248347049649655882805302200230344321447970850105073319876639142294086682940899129887746560, 6190962148837546729484613750343858540964074821339762403027042238415493914727378352441698290060779325377055262974669117510310897925844422619677427496433201868221923922936781815878751270458780821828000747695751906679959041730142123734868465685813500831798938562116958712764766221196902728646355064357969039084800, 7810136864687366643349820423510713851677755928459392569972576362308776938579154229234142458230521610475669716368044117474546055844911425458669985457038808510679965564320247829262424679655692729075324020170025482273179098798025448403987910557487801049346353262978317145334012771356092673061555619651591710845440, 7714891293166789001357749442736192951047539392746473148387544943256230878352579177658116330691125005469868866168433823359002811261436895879905717341709066943476551350121220416710443890879403793354893239436244683708872036617561723423451472623859901036549446515868825472829939444876140323390073234046084494859520, 2000157001932130481833490596264938913234547249971307853285659800103467264758076083096548678327328705121817854191816176426408136252965121154049630421924572911271698498179575663591596564302067650129046395409396769850448305789738224591265196606185900268735041689299325122585539856078999343101130097715651535704320, 5905225434275813803508400808020295839073425214201004138271947981257855734047653197713619907442589510359652712375838235163681164175420833883384623150443977166611681280339699578222808904129914014666708405494409510987037855188750948793259151884929800793408218320788483695252546241757045679631907907541447391127040, 666719000644043493944496865421646304411515749990435951095219933367822421586025361032182892775776235040605951397272058808802712084321707051349876807308190970423899499393191887863865521434022550043015465136465589950149435263246074863755065535395300089578347229766441707528513285359666447700376699238550511901440, 190491143041155283984141961549041801260433071425838843170062838105092120453150103152052255078793210011601700399220588231086489166949059157528536230659483134406828428398054825103961577552577871440861561467561597128614124360927449961072875867255800025593813494218983345008146652959904699342964771211014431971840, 8286364722290254853310175327383318354828838607023989677897733457571507239712029487114273095927504635504673967366095588052262278762284073352491326033687516346697036635315384892022328623537137407677477923838929475094714409700344073306670100225627301113330886998525775507854379403755854421418967547679127790775040, 7619645721646211359365678461961672050417322857033553726802513524203684818126004126082090203151728400464068015968823529243459566677962366301141449226379325376273137135922193004158463102103114857634462458702463885144564974437097998442915034690232001023752539768759333800325866118396187973718590848440577278873600, 6381453291878702013468755711892900342224507892765601246197105076520586035180528455593750545139572535388656963373889705741397387092793481777205963727092685002628752351334836640982712848011358693268862309163313503808573166091069573695941341553069300857392752056335942057772912874156807427989319835568983471056640, 5905225434275813803508400808020295839073425214201004138271947981257855734047653197713619907442589510359652712375838235163681164175420833883384623150443977166611681280339699578222808904129914014666708405494409510987037855188750948793259151884929800793408218320788483695252546241757045679631907907541447391127040, 8095873579249099569326033365834276553568405535598150834727670619466415119258879383962220840848711425493072266966874999821175789595335014194962789803028033212290208206917330066918367045984559536236616362371367877966100285339416623345597224358371501087737073504306792162846232750795949722076002776468113358803200, 8381610293810832495302246308157839255459055142736909099482764876624053299938604538690299223466901240510474817565705882167805523345758602931255594149017257913900450849514412304574309412313426343397908704572710273659021471880807798287206538159255201126127793745635267180358452730235806771090449933284635006760960, 666719000644043493944496865421646304411515749990435951095219933367822421586025361032182892775776235040605951397272058808802712084321707051349876807308190970423899499393191887863865521434022550043015465136465589950149435263246074863755065535395300089578347229766441707528513285359666447700376699238550511901440, 1333438001288086987888993730843292608823031499980871902190439866735644843172050722064365785551552470081211902794544117617605424168643414102699753614616381940847798998786383775727731042868045100086030930272931179900298870526492149727510131070790600179156694459532883415057026570719332895400753398477101023802880, 6381453291878702013468755711892900342224507892765601246197105076520586035180528455593750545139572535388656963373889705741397387092793481777205963727092685002628752351334836640982712848011358693268862309163313503808573166091069573695941341553069300857392752056335942057772912874156807427989319835568983471056640, 7048172292522745507413252577314546646636023642756037197292325009888408456766553816625933437915348770429262914771161764550200099177115188828555840534400875973052651850728028528846578369445381243311877774299779093758722601354315648559696407088464600946971099286102383765301426159516473875689696534807533982958080, 7905382436207944285341891404285234752307972464172311991557607781361322998805729280810168585769918215481470566567654411590089300428385955037434253572368550077883379778519275241814405468431981664795754800903806280837486160978489173384524348491115701062143260010087808817838086097836045022733038005257098926831360, 6571944434919857297452897673441942143484940964191440089367167914625678155633678558745802800218365745400258663773110293972483876259742540934734499957752168137035580779732891466086674425563936564709723870630875100937187290451997023657014217420325100882986565550554925402781059527116712127332284606779997903028480, 666719000644043493944496865421646304411515749990435951095219933367822421586025361032182892775776235040605951397272058808802712084321707051349876807308190970423899499393191887863865521434022550043015465136465589950149435263246074863755065535395300089578347229766441707528513285359666447700376699238550511901440, 1428683572808664629881064711617813509453248035693791323775471285788190903398625773640391913090949075087012752994154411733148668752117943681464021729946123508051213212985411188279711831644334035806461711006711978464605932706955874708046569004418500191953601206642375087561099897199285245072235784082608239788800, 1523929144329242271873135692392334410083464571406710745360502704840736963625200825216418040630345680092813603193764705848691913335592473260228289845275865075254627427184438600831692620420622971526892491740492777028912994887419599688583006938046400204750507953751866760065173223679237594743718169688115455774720]
    
    # Step 1: Analyze DH parameters
    p, g, u, v = analyze_dh_parameters()
    
    # Step 2: Brute force private keys
    a, b = brute_force_private_keys(p, g, u, v)
    
    if a is None or b is None:
        print("Failed to recover private keys!")
        return
    
    # Step 3: Compute shared key
    shared_key = compute_shared_key(p, g, u, v, a, b)
    
    if shared_key is None:
        print("Failed to compute shared key!")
        return
    
    # Step 4: Decrypt the flag
    flag = decrypt_flag(shared_key, encrypted_data)
    
    if flag:
        print(f"\nüéâ SUCCESS! The flag is: {flag}")
    else:
        print("\n‚ùå Failed to decrypt the flag")

if __name__ == "__main__":
    main()